# Load required libraries
library(shiny)
library(shinydashboard)
library(ggplot2)
library(dplyr)
library(plotly)
library(GGally)
library(fmsb)
library(corrplot)
library(RColorBrewer)
library(shinycssloaders) # Add loading animations to plots

# Prepare the data
data <- data.frame(
  Feature = c("age", "weight", "ap_hi", "cholesterol", "gluc", "ap_lo", 
              "active", "smoke", "height", "gender", "alco", "id"),
  Estimate = c(2.015421e-04, 2.672162e-02, 4.953846e-02, 6.980843e-01, 3.183453e-01, 
               2.123630e-03, -1.797826e-01, -1.093408e-01, -2.637158e-03, 
               3.401480e-02, -6.501463e-02, 2.633815e-07),
  Std_Error = c(3.268044e-06, 5.689632e-04, 5.797933e-04, 1.238123e-02, 
                1.360920e-02, 1.063992e-04, 1.907250e-02, 2.669685e-02, 
                9.213171e-04, 1.585375e-02, 3.352812e-02, 2.620139e-07),
  P_Value = c(0, 0, 0, 0, 5.163471e-121, 1.250139e-88, 4.249136e-21, 
              4.209936e-05, 4.204746e-03, 3.190994e-02, 5.248823e-02, 
              3.147912e-01)
)

# Custom CSS
custom_css <- "
body { background-color: #f4f4f4; }
h2, h4 { text-align: center; color: #333; }
.skin-blue .main-header .logo { background-color: #3c8dbc; }
.skin-blue .main-header li.user-header { background-color: #3c8dbc; }
.skin-blue .main-sidebar { background-color: #2c3e50; }
.skin-blue .main-sidebar .sidebar .sidebar-menu .active a { background-color: #3c8dbc; }
"

# Define the Shiny UI
ui <- dashboardPage(
  dashboardHeader(title = "Biomarker Analysis Dashboard"),
  dashboardSidebar(
    sidebarMenu(
      menuItem("Visualizations", tabName = "visualizations", icon = icon("chart-bar")),
      menuItem("Data Overview", tabName = "data_overview", icon = icon("table"))
    )
  ),
  dashboardBody(
    tags$head(tags$style(HTML(custom_css))),
    tabItems(
      tabItem(tabName = "visualizations",
              fluidRow(
                box(title = "Select a Visualization", status = "primary", solidHeader = TRUE,
                    selectInput("plotType", "Choose a plot type:",
                                choices = c("Horizontal Bar Plot", "Parallel Coordinate Plot", 
                                            "Radar Chart", "3D Scatter Plot", 
                                            "Box Plot", "Heatmap"), selected = "Horizontal Bar Plot"),
                    checkboxInput("showErrorBars", "Show Error Bars", TRUE),
                    width = 4
                ),
                box(title = "Plot", status = "primary", solidHeader = TRUE,
                    plotOutput("mainPlot", height = "600px") %>% shinycssloaders::withSpinner(),
                    plotlyOutput("interactivePlot", height = "600px") %>% shinycssloaders::withSpinner(),
                    width = 8
                )
              )
      ),
      tabItem(tabName = "data_overview",
              fluidRow(
                box(title = "Data Summary", status = "primary", solidHeader = TRUE,
                    verbatimTextOutput("dataSummary"),
                    width = 12
                )
              )
      )
    )
  )
)

# Define the Shiny server
server <- function(input, output) {
  
  output$dataSummary <- renderPrint({
    summary(data)
  })
  
  output$mainPlot <- renderPlot({
    plotType <- input$plotType
    
    if (plotType == "Horizontal Bar Plot") {
      ggplot(data, aes(x = reorder(Feature, Estimate), y = Estimate)) +
        geom_bar(stat = "identity", fill = "steelblue") +
        (if (input$showErrorBars) geom_errorbar(aes(ymin = Estimate - Std_Error, ymax = Estimate + Std_Error), width = 0.2)) +
        coord_flip() +
        theme_minimal() +
        labs(title = "Horizontal Bar Plot of Biomarker Estimates",
             subtitle = "Displays estimates with error bars") +
        theme(plot.title = element_text(hjust = 0.5, size = 20, face = "bold"),
              plot.subtitle = element_text(hjust = 0.5, size = 14),
              axis.title = element_text(size = 14),
              axis.text = element_text(size = 12))
      
    } else if (plotType == "Parallel Coordinate Plot") {
      scaled_data <- scale(data[, c("Estimate", "Std_Error", "P_Value")])
      scaled_data <- data.frame(scaled_data)
      scaled_data$Feature <- data$Feature
      
      ggparcoord(data = scaled_data, columns = c(1:3), 
                 groupColumn = "Feature", scale = "globalminmax") +
        theme_minimal() +
        labs(title = "Parallel Coordinate Plot for Biomarkers",
             subtitle = "Visualizing feature relationships") +
        theme(plot.title = element_text(hjust = 0.5, size = 20, face = "bold"),
              plot.subtitle = element_text(hjust = 0.5, size = 14),
              axis.title = element_text(size = 14),
              axis.text = element_text(size = 12))
      
    } else if (plotType == "Radar Chart") {
      radar_data <- as.data.frame(t(data[, c("Estimate", "Std_Error")]))
      radar_data <- rbind(rep(1, ncol(radar_data)), rep(0, ncol(radar_data)), radar_data)
      colnames(radar_data) <- data$Feature
      radar_data <- as.data.frame(radar_data)

      radarchart(radar_data, axistype=1, 
                 pcol=rainbow(nrow(radar_data)-2), 
                 pfcol=alpha(rainbow(nrow(radar_data)-2), 0.5), 
                 plwd=2, plty=1,
                 title = "Radar Chart of Biomarkers",
                 axisticks=TRUE, cglcol="grey", cglty=1, 
                 pangle=90, plabels=colnames(radar_data), 
                 cex.axis=0.7, cex.main=1.5)
      
    } else if (plotType == "Box Plot") {
      ggplot(data, aes(x = Feature, y = Estimate)) +
        geom_boxplot(fill = "lightgreen", color = "darkgreen") +
        theme_minimal() +
        coord_flip() +
        labs(title = "Boxplot of Biomarker Estimates",
             subtitle = "Distribution of estimates across features") +
        theme(plot.title = element_text(hjust = 0.5, size = 20, face = "bold"),
              plot.subtitle = element_text(hjust = 0.5, size = 14),
              axis.title = element_text(size = 14),
              axis.text = element_text(size = 12))
      
    } else if (plotType == "Heatmap") {
      cor_matrix <- cor(data[, c("Estimate", "Std_Error", "P_Value")])
      corrplot(cor_matrix, method = "color", type = "upper", 
               tl.col = "black", tl.srt = 45,
               title = "Correlation Heatmap of Biomarkers", mar=c(0,0,1,0),
               addgrid.col = "grey", addCoef.col = "white")
    }
  })
  
  output$interactivePlot <- renderPlotly({
    req(input$plotType == "3D Scatter Plot")
    
    plot_ly(data, x = ~Estimate, y = ~Std_Error, z = ~P_Value, 
            color = ~Feature, colors = RColorBrewer::brewer.pal(12, "Set3")) %>%
      add_markers(size = 10, opacity = 0.8) %>%
      layout(title = "Interactive 3D Scatter Plot of Biomarkers",
             scene = list(xaxis = list(title = 'Estimate'),
                          yaxis = list(title = 'Standard Error'),
                          zaxis = list(title = 'P Value')),
             showlegend = TRUE,
             margin = list(l = 0, r = 0, b = 0, t = 0))
  })
}

# Run the application 
shinyApp(ui = ui, server = server)
