# Load required libraries
library(shiny)
library(ggplot2)
library(dplyr)
library(plotly)
library(GGally)
library(fmsb)
library(corrplot)
library(RColorBrewer)

# Prepare the data
data <- data.frame(
  Feature = c("age", "weight", "ap_hi", "cholesterol", "gluc", "ap_lo", 
              "active", "smoke", "height", "gender", "alco", "id"),
  Estimate = c(2.015421e-04, 2.672162e-02, 4.953846e-02, 6.980843e-01, 3.183453e-01, 
               2.123630e-03, -1.797826e-01, -1.093408e-01, -2.637158e-03, 
               3.401480e-02, -6.501463e-02, 2.633815e-07),
  Std_Error = c(3.268044e-06, 5.689632e-04, 5.797933e-04, 1.238123e-02, 
                1.360920e-02, 1.063992e-04, 1.907250e-02, 2.669685e-02, 
                9.213171e-04, 1.585375e-02, 3.352812e-02, 2.620139e-07),
  P_Value = c(0, 0, 0, 0, 5.163471e-121, 1.250139e-88, 4.249136e-21, 
              4.209936e-05, 4.204746e-03, 3.190994e-02, 5.248823e-02, 
              3.147912e-01)
)

# Define the Shiny UI
ui <- fluidPage(
  titlePanel("Biomarker Analysis"),
  
  sidebarLayout(
    sidebarPanel(
      h2("Select a Visualization"),
      selectInput("plotType", "Choose a plot type:",
                  choices = c("Horizontal Bar Plot", "Parallel Coordinate Plot", 
                              "Radar Chart", "3D Scatter Plot", 
                              "Box Plot", "Heatmap"))
    ),
    
    mainPanel(
      plotOutput("mainPlot", height = "600px"),
      plotlyOutput("interactivePlot", height = "600px")
    )
  )
)

# Define the Shiny server
server <- function(input, output) {
  
  output$mainPlot <- renderPlot({
    # Based on the selected plot type, generate the appropriate plot
    plotType <- input$plotType
    
    if (plotType == "Horizontal Bar Plot") {
      # Horizontal Bar Plot
      ggplot(data, aes(x = reorder(Feature, Estimate), y = Estimate)) +
        geom_bar(stat = "identity", fill = "steelblue") +
        geom_errorbar(aes(ymin = Estimate - Std_Error, ymax = Estimate + Std_Error), width = 0.2) +
        coord_flip() +
        theme_minimal() +
        labs(title = "Horizontal Bar Plot of Biomarker Estimates",
             x = "Features", y = "Estimates with Error Bars") +
        theme(plot.title = element_text(hjust = 0.5))

    } else if (plotType == "Parallel Coordinate Plot") {
      # Parallel Coordinate Plot
      scaled_data <- scale(data[, c("Estimate", "Std_Error", "P_Value")])
      scaled_data <- data.frame(scaled_data)
      scaled_data$Feature <- data$Feature
      
      ggparcoord(data = scaled_data, columns = 1:3, 
                 groupColumn = "Feature", scale = "globalminmax") +
        theme_minimal() +
        labs(title = "Parallel Coordinate Plot for Biomarkers",
             x = "Features", y = "Scaled Values") +
        theme(plot.title = element_text(hjust = 0.5))
      
    } else if (plotType == "Radar Chart") {
      # Radar Chart
      radar_data <- as.data.frame(t(data[, c("Estimate", "Std_Error")]))
      radar_data <- rbind(rep(1, ncol(radar_data)), rep(0, ncol(radar_data)), radar_data)
      colnames(radar_data) <- data$Feature
      radar_data <- as.data.frame(radar_data)
      
      radarchart(radar_data, axistype=1, 
                 pcol=rainbow(nrow(radar_data)-2), 
                 pfcol=alpha(rainbow(nrow(radar_data)-2), 0.5), 
                 plwd=2, plty=1,
                 title = "Radar Chart of Biomarkers")
      
    } else if (plotType == "Box Plot") {
      # Boxplot
      ggplot(data, aes(x = Feature, y = Estimate)) +
        geom_boxplot(fill = "lightgreen", color = "darkgreen") +
        theme_minimal() +
        coord_flip() +
        labs(title = "Boxplot of Biomarker Estimates",
             x = "Features", y = "Estimates") +
        theme(plot.title = element_text(hjust = 0.5))
      
    } else if (plotType == "Heatmap") {
      # Heatmap of Correlation Matrix
      cor_matrix <- cor(data[, c("Estimate", "Std_Error", "P_Value")])
      corrplot(cor_matrix, method = "color", type = "upper", 
               tl.col = "black", tl.srt = 45,
               title = "Correlation Heatmap of Biomarkers", mar=c(0,0,1,0))
    }
  })
  
  output$interactivePlot <- renderPlotly({
    req(input$plotType == "3D Scatter Plot")
    
    # Create an interactive 3D scatter plot
    plot_ly(data, x = ~Estimate, y = ~Std_Error, z = ~P_Value, 
            color = ~Feature, colors = RColorBrewer::brewer.pal(12, "Set3")) %>%
      add_markers() %>%
      layout(title = "Interactive 3D Scatter Plot of Biomarkers",
             scene = list(xaxis = list(title = 'Estimate'),
                          yaxis = list(title = 'Standard Error'),
                          zaxis = list(title = 'P Value')),
             showlegend = TRUE)
  })
}

# Run the application 
shinyApp(ui = ui, server = server)
