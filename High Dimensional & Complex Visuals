library(shiny)
library(shinydashboard)
library(ggplot2)
library(ggalluvial)
library(dplyr)
library(dbscan)
library(mclust)
library(shinycssloaders)
library(shinyjs)
library(visNetwork)
library(ggplot2)

# Assume dfCardio is already loaded prior to running the app 
# Load and preprocess data
dfCardio <- dfCardio[-c(1)]
dfCardio$age <- dfCardio$age / 365

dfCardio$gender[dfCardio$gender == 1] <- 0  # women
dfCardio$gender[dfCardio$gender == 2] <- 1  # men 

# Remove outliers and preprocess
dfCardio <- dfCardio[dfCardio$ap_lo <= 200 & dfCardio$ap_lo >= 30, ]
dfCardio <- dfCardio[dfCardio$ap_hi <= 260 & dfCardio$ap_hi >= 50, ]

# Coerce column types
colnames_df <- as.vector(colnames(dfCardio))
numeric_vars <- c("age", "height", "weight", "ap_hi", "ap_lo")
categorical_vars <- colnames_df[!colnames_df %in% numeric_vars]
dfCardio[categorical_vars] <- lapply(dfCardio[categorical_vars], as.factor)
dfCardio[numeric_vars] <- lapply(dfCardio[numeric_vars], as.numeric)

# Feature transformation
dfCardio <- dfCardio %>%
  mutate(
    age_years = round(age / 365.25),
    BMI = round(weight / ((height / 100) ^ 2)),
    BMI_Category = case_when(
      BMI < 18.5 ~ "Underweight",
      BMI < 25 ~ "Normal",
      BMI < 30 ~ "Overweight",
      TRUE ~ "Obese"
    ),
    BP_Category = case_when(
      ap_hi < 120 & ap_lo < 80 ~ "Normal",
      ap_hi <= 129 & ap_lo < 80 ~ "Elevated",
      ap_hi <= 139 | ap_lo <= 89 ~ "Stage 1",
      ap_hi >= 140 | ap_lo >= 90 ~ "Stage 2",
      ap_hi > 180 | ap_lo > 120 ~ "Crisis",
      TRUE ~ "Unknown"
    ),
    pulse_pressure = ap_hi - ap_lo,
    pulse_pressure_category = case_when(
      pulse_pressure <= 40 ~ "Low",
      pulse_pressure <= 60 ~ "Normal",
      TRUE ~ "High"
    )
  )

# Define UI
ui <- dashboardPage(
  title = 'Cardiovascular Disease Prediction Dashboard',
  dashboardHeader(title = "CVD Prediction Dashboard", titleWidth = 350),
  dashboardSidebar(
    sidebarMenu(
      menuItem("Nested Tree Diagram", tabName = "nested_tree", icon = icon("tree")),
      menuItem("Home", tabName = "home", icon = icon("hospital")),
      menuItem("Circular Barplot", tabName = "circular_barplot", icon = icon("circle")),
      menuItem("Partial Dependence Plot", tabName = "partial_dependence", icon = icon("chart-line")),
      menuItem("Sunburst Chart", tabName = "sunburst_chart", icon = icon("project-diagram")),
      menuItem("Sankey Diagram", tabName = "sankey_diagram", icon = icon("project-diagram")),
      menuItem("Radar Chart", tabName = "radar_chart", icon = icon("project-diagram")),
      menuItem("DBSCAN Clustering", tabName = "dbscan", icon = icon("project-diagram")),
      menuItem("Gaussian Mixture Models", tabName = "gmm", icon = icon("project-diagram")),
      menuItem("Density Plots", tabName = "density_plots", icon = icon("chart-bar")) # New menu item for Density Plots
    )
  ),
  dashboardBody(
    useShinyjs(),
    tags$head(tags$style(HTML("
      body {
        background-color: #f4f6f9;
        font-family: Arial, sans-serif;
      }
      .wrapper {
        background-color: #fff;
      }
      .main-header {
        background-color: #0073b7;
        color: #fff;
      }
      .sidebar {
        background-color: #3c8dbc;
      }
      .sidebar a {
        color: #ffffff !important;
      }
      .box {
        border-top: 3px solid #0073b7;
        margin-bottom: 20px;
      }
      h2 {
        color: #0073b7;
      }
      p {
        font-size: 16px;
        color: #555;
      }
    "))),
    tabItems(
      tabItem(tabName = "nested_tree",
              fluidRow(
                box(title = "Nested Tree Diagram", status = "primary", solidHeader = TRUE, visNetworkOutput("nested_tree_diagram"))
              )
      ),
      tabItem(tabName = "home",
              h2("Cardiovascular Disease Dashboard"),
              p("This dashboard provides insights about cardiovascular diseases using various visualizations.")
      ),
      tabItem(tabName = "circular_barplot",
              fluidRow(
                box(title = "Circular Barplot of CVD Status", status = "primary", solidHeader = TRUE, plotOutput("circular_barplot"))
              )
      ),
      tabItem(tabName = "partial_dependence",
              fluidRow(
                box(title = "Partial Dependence Plot for Age", status = "primary", solidHeader = TRUE, plotOutput("partial_age")),
                box(title = "Partial Dependence Plot for BMI", status = "primary", solidHeader = TRUE, plotOutput("partial_bmi")),
                box(title = "Partial Dependence Plot for AP_HI", status = "primary", solidHeader = TRUE, plotOutput("partial_ap_hi")),
                box(title = "Partial Dependence Plot for AP_LO", status = "primary", solidHeader = TRUE, plotOutput("partial_ap_lo"))
              )
      ),
      tabItem(tabName = "sunburst_chart",
              fluidRow(
                box(title = "Sunburst Chart of CVD Factors", status = "primary", solidHeader = TRUE, plotOutput("sunburst_chart")),
                p("Note: Data for Sunburst Chart may be based on categorical variables.")
              )
      ),
      tabItem(tabName = "sankey_diagram",
              fluidRow(
                box(title = "Sankey Diagram", status = "primary", solidHeader = TRUE, plotOutput("sankey_diagram"))
              )
      ),
      tabItem(tabName = "radar_chart",
              fluidRow(
                box(title = "Radar Chart Comparative Analysis", status = "primary", solidHeader = TRUE, plotOutput("radar_chart"))
              )
      ),
      tabItem(tabName = "dbscan",
              fluidRow(
                box(title = "DBSCAN Clustering", status = "primary", solidHeader = TRUE, 
                    plotOutput("dbscan_plot"))
              )
      ),
      tabItem(tabName = "gmm",
              fluidRow(
                box(title = "Gaussian Mixture Models", status = "primary", solidHeader = TRUE, 
                    plotOutput("gmm_plot"))
              )
      ),
      tabItem(tabName = "density_plots",
              fluidRow(
                box(title = "Facet-Wrapped Density Plots", status = "primary", solidHeader = TRUE, plotOutput("density_plots"))
              )
      )
    )
  ),
  skin = 'black'
)

server <- function(input, output, session) {
  
  # Prepare data for modeling
  dfCardio_new <- na.omit(dfCardio)  # Remove rows with NA
  
  # Nested Tree Diagram
  output$nested_tree_diagram <- renderVisNetwork({
    nodes <- data.frame(id = 1:5, label = c("CVD Factors", "Age", "Height", "Weight", "Blood Pressure"))
    edges <- data.frame(from = c(1, 1, 1, 1), to = c(2, 3, 4, 5))
    
    visNetwork(nodes, edges) %>%
      visEdges(arrows = "to") %>%
      visLayout(randomSeed = 123)
  })
  
  # Circular Barplot
  output$circular_barplot <- renderPlot({
    df_barplot <- dfCardio %>%
      group_by(cardio) %>%
      summarise(count = n())
    
    ggplot(df_barplot, aes(x = factor(cardio), y = count)) +
      geom_bar(stat = "identity", fill = "steelblue") +
      coord_polar(theta = "x") + 
      labs(title = "Circular Barplot of CVD Status",
           x = "CVD Status", y = "Count") +
      theme_minimal()
  })

  # Partial Dependence Plots
  output$partial_age <- renderPlot({
    model_lr <- glm(cardio ~ ., data = dfCardio_new, family = binomial)
    pdp_age <- partial(model_lr, pred.var = "age")
    
    ggplot(pdp_age, aes(x = age, y = yhat)) +
      geom_line() +
      labs(title = "Partial Dependence of Age on CVD Status",
           x = "Age", y = "Partial Dependence (Predicted Probability)") +
      theme_minimal()
  })
  
  output$partial_bmi <- renderPlot({
    model_lr <- glm(cardio ~ ., data = dfCardio_new, family = binomial)
    pdp_bmi <- partial(model_lr, pred.var = "BMI")
    
    ggplot(pdp_bmi, aes(x = BMI, y = yhat)) +
      geom_line() +
      labs(title = "Partial Dependence of BMI on CVD Status",
           x = "BMI", y = "Partial Dependence (Predicted Probability)") +
      theme_minimal()
  })
  
  output$partial_ap_hi <- renderPlot({
    model_lr <- glm(cardio ~ ., data = dfCardio_new, family = binomial)
    pdp_ap_hi <- partial(model_lr, pred.var = "ap_hi")
    
    ggplot(pdp_ap_hi, aes(x = ap_hi, y = yhat)) +
      geom_line() +
      labs(title = "Partial Dependence of AP_HI on CVD Status",
           x = "AP_HI", y = "Partial Dependence (Predicted Probability)") +
      theme_minimal()
  })
  
  output$partial_ap_lo <- renderPlot({
    model_lr <- glm(cardio ~ ., data = dfCardio_new, family = binomial)
    pdp_ap_lo <- partial(model_lr, pred.var = "ap_lo")
    
    ggplot(pdp_ap_lo, aes(x = ap_lo, y = yhat)) +
      geom_line() +
      labs(title = "Partial Dependence of AP_LO on CVD Status",
           x = "AP_LO", y = "Partial Dependence (Predicted Probability)") +
      theme_minimal()
  })

  # Sunburst Chart Simulation
  output$sunburst_chart <- renderPlot({
    data_sunburst <- dfCardio %>%
      group_by(BMI_Category, BP_Category, cardio) %>%
      summarise(Freq = n()) %>%
      ungroup()
    
    # Create a simple stacked bar chart to mimic sunburst visualization
    ggplot(data_sunburst, aes(x = "", y = Freq, fill = interaction(BMI_Category, BP_Category))) +
      geom_bar(width = 1, stat = "identity") +
      coord_polar("y") +
      labs(title = "Sunburst Chart of CVD Factors",
           fill = "Categories") +
      theme_void() +
      theme(legend.position = "right")
  })

  # Single Sankey Diagram
  output$sankey_diagram <- renderPlot({
    sankey_data <- dfCardio %>%
      group_by(BMI_Category, BP_Category) %>%
      summarise(Freq = n()) %>%
      ungroup()

    ggplot(sankey_data, aes(axis1 = BMI_Category, axis2 = BP_Category, y = Freq)) +
      geom_alluvium(aes(fill = BP_Category)) +
      geom_stratum() +
      geom_text(stat = "stratum", aes(label = after_stat(stratum))) +
      labs(title = "Sankey Diagram") +
      theme_minimal()
  })

  # Radar Chart
  output$radar_chart <- renderPlot({
    radar_data <- data.frame(
      factor = c("Age", "Height", "Weight", "AP_hi", "AP_lo"),
      max = c(max(dfCardio$age), max(dfCardio$height), max(dfCardio$weight), max(dfCardio$ap_hi), max(dfCardio$ap_lo)),
      min = c(min(dfCardio$age), min(dfCardio$height), min(dfCardio$weight), min(dfCardio$ap_hi), min(dfCardio$ap_lo)),
      average = colMeans(dfCardio[, c("age", "height", "weight", "ap_hi", "ap_lo")])
    )
    
    # Preparing for radar chart
    radar_data <- rbind(rep(10, 5), radar_data)
    rownames(radar_data) <- c("max", "min", "average")
    
    radarchart(radar_data)
  })
  
  # DBSCAN Clustering
  output$dbscan_plot <- renderPlot({
    dbscan_data <- dfCardio_new %>%
      select(age, height, weight)  # adjust your variables accordingly
    
    # Perform DBSCAN
    dbscan_result <- dbscan(dbscan_data, eps = 0.5, minPts = 5)
    dbscan_data$cluster <- as.factor(dbscan_result$cluster)

    # Plot the results
    ggplot(dbscan_data, aes(x = age, y = height, color = cluster)) +
      geom_point(alpha = 0.5, size = 2) +
      labs(title = "DBSCAN Clustering",
           x = "Age", y = "Height") +
      theme_minimal() +
      scale_color_manual(values = c("red", "blue", "green", "black", "grey")) +
      theme(legend.position = "bottom")
  })

  # Gaussian Mixture Models
  output$gmm_plot <- renderPlot({
    # Fit GMM
    gmm_fit <- Mclust(dfCardio_new[, c("age", "height", "weight")])
    dfCardio_new$gmm_cluster <- as.factor(gmm_fit$classification)

    # Create a scatter plot to show the GMM result
    ggplot(dfCardio_new, aes(x = age, y = height, color = gmm_cluster)) +
      geom_point(alpha = 0.5, size = 2) +
      labs(title = "Gaussian Mixture Models Clustering",
           x = "Age", y = "Height") +
      theme_minimal() +
      scale_color_manual(values = rainbow(length(unique(dfCardio_new$gmm_cluster)))) +
      theme(legend.position = "bottom") +
      geom_density_2d(aes(color = gmm_cluster), size = 0.5)
  })
  
  # Facet-Wrapped Density Plots
  output$density_plots <- renderPlot({
    ggplot(dfCardio_new, aes(x = age)) + 
      geom_density(aes(fill = factor(cardio)), alpha = 0.5) +
      facet_wrap(~ cardio, scales = "free") +
      labs(title = "Facet-Wrapped Density Plots by CVD Status",
           x = "Age", y = "Density") +
      theme_minimal() +
      scale_fill_discrete(name = "CVD Status", labels = c("No CVD", "CVD"))
  })  
}

# Create and run the Shiny app
shinyApp(ui = ui, server = server)
