library(shiny)
library(shinydashboard)
library(DT)
library(httr)
library(sentimentr)
library(ggplot2)
library(tm)
library(wordcloud)
library(RColorBrewer)
library(syuzhet)
library(plotly)  # Added for advanced visualizations
library(cluster)  # For clustering
library(dplyr)  # For data manipulation
library(ggalluvial)  # For Sankey diagram
library(igraph)  # For network graph
library(reshape2)  # For reshaping data

# Assuming dfCardio dataset is pre-loaded
# dfCardio <- read.csv("path_to_your_dfCardio.csv")  # Uncomment and adapt to load your dataset

ui <- dashboardPage(
  dashboardHeader(title = "Chatbot with Sentiment Analysis", titleWidth = 300),
  dashboardSidebar(
    sidebarMenu(
      menuItem("Introduction", tabName = "introduction", icon = icon("info-circle")),
      menuItem("CVD Questions", tabName = "cvd_questions", icon = icon("question-circle")),
      menuItem("Chat", tabName = "chat", icon = icon("comments")),
      menuItem("Sentiment & Emotion", tabName = "sentiment_emotion", icon = icon("chart-line")),
      menuItem("Metrics", tabName = "metrics", icon = icon("tachometer-alt")),
      menuItem("Word Cloud", tabName = "word_cloud", icon = icon("cloud")),
      menuItem("Emotion Score Consistency", tabName = "emotion_consistency", icon = icon("balance-scale")),
      menuItem("Emotion Detection Accuracy", tabName = "emotion_accuracy", icon = icon("check-square")),
      menuItem("Cluster Analysis", tabName = "cluster_analysis", icon = icon("sitemap")),
      menuItem("User Classification", tabName = "user_classification", icon = icon("users")),
      menuItem("Advanced Visualizations", tabName = "advanced_visualizations", icon = icon("chart-bar")),
      menuItem("Time Spent Analysis", tabName = "time_spent_analysis", icon = icon("clock")),
      menuItem("Heatmap of Emotion Frequency", tabName = "emotion_heatmap", icon = icon("heat-map")),
      menuItem("Network Graph for User Interactions", tabName = "network_graph", icon = icon("project-diagram")),
      menuItem("Sankey Diagram for Emotion Flow", tabName = "sankey_diagram", icon = icon("stream")),
      menuItem("Facet Grid of Sentiment by User", tabName = "facet_grid", icon = icon("grip-horizontal"))
    ),
    width = 250
  ),
  dashboardBody(
    tags$head(
      tags$style(HTML("
        .box {
          border-radius: 10px;
        }
        .content-wrapper {
          background: #f4f6f9;
        }
        .shiny-input-container {
          margin-bottom: 10px;
        }
      "))
    ),
    tabItems(
      tabItem(tabName = "introduction",
              fluidRow(
                box(
                  title = "Cardiovascular Health Overview", width = 12, status = "primary", solidHeader = TRUE,
                  p("The dfCardio dataset includes key features such as age, cholesterol levels, and blood pressure, which can be influential in predicting anxiety and stress related to cardiovascular disease progression."),
                  p("These emotional states may be inferred based on certain physical indicators and social history."),
                  dataTableOutput("cardioData")
                )
              )
      ),
      tabItem(tabName = "cvd_questions",
              fluidRow(
                box(
                  title = "CVD Personal Questions", width = 12, status = "primary", solidHeader = TRUE,
                  actionButton("generateQuestionsBtn", "Do you want to answer 10 questions?", 
                               class = "btn-success btn-lg", style = "width: 100%;"),
                  textOutput("currentQuestion"),
                  textInput("answerInput", "Your answer:", ""),
                  actionButton("nextQuestionBtn", "Next Question", 
                               class = "btn-success btn-lg", style = "width: 100%;")
                )
              )
      ),
      tabItem(tabName = "chat",
              fluidRow(
                box(
                  title = "Chatbot", width = 12, status = "primary", solidHeader = TRUE,
                  textInput("userInput", "Type your message:", ""),
                  actionButton("generateBtn", "Send",
                               class = "btn-primary btn-lg",
                               style = "width: 100%;"),
                  dataTableOutput("chatOutput"),
                  tags$style(HTML("#chatOutput { height: 400px; }"))
                )
              )
      ),
      tabItem(tabName = "sentiment_emotion",
              fluidRow(
                box(
                  title = "Sentiment & Emotion Visualization", width = 12, status = "primary", solidHeader = TRUE,
                  plotOutput("sentimentCountPlot", height = "300px"),
                  plotOutput("emotionCountPlot", height = "300px"),
                  plotOutput("sentimentScorePlot", height = "300px"),
                  plotOutput("sentimentLinePlot", height = "300px"),
                  plotOutput("cumulativeSentimentPlot", height = "300px")
                )
              )
      ),
      tabItem(tabName = "metrics",
              fluidRow(
                box(
                  title = "Dashboard Summary", width = 12, status = "primary", solidHeader = TRUE,
                  p("Summary of key metrics from chat interactions."),
                  textOutput("avgSentimentScore"),
                  textOutput("mostFrequentEmotion"),
                  textOutput("totalMessages"),
                  textOutput("sentimentCounts")
                )
              )
      ),
      tabItem(tabName = "word_cloud",
              fluidRow(
                box(
                  title = "Word Cloud", width = 12, status = "primary", solidHeader = TRUE,
                  plotOutput("wordCloudPlot", height = "600px")
                )
              )),
      tabItem(tabName = "emotion_consistency",
              fluidRow(
                box(
                  title = "Emotion Score Consistency", width = 12, status = "primary", solidHeader = TRUE,
                  plotOutput("emotionConsistencyPlot", height = "300px")
                )
              )),
      tabItem(tabName = "emotion_accuracy",
              fluidRow(
                box(
                  title = "Emotion Detection Accuracy", width = 12, status = "primary", solidHeader = TRUE,
                  plotOutput("confusionMatrixPlot", height = "300px")
                )
              )),
      tabItem(tabName = "cluster_analysis",
              fluidRow(
                box(
                  title = "Cluster Analysis", width = 12, status = "primary", solidHeader = TRUE,
                  plotOutput("clusterPlot", height = "600px"),
                  p("This plot shows the clustering of user messages based on sentiment and emotion."),
                  actionButton("performClustering", "Perform Clustering", class = "btn-warning btn-lg")
                )
              )),
      tabItem(tabName = "user_classification",
              fluidRow(
                box(
                  title = "User Classification", width = 12, status = "primary", solidHeader = TRUE,
                  plotOutput("userClassificationPlot", height = "600px"),
                  p("This plot displays user classifications based on emotional profiles.")
                )
              )),
      tabItem(tabName = "advanced_visualizations",
              fluidRow(
                box(
                  title = "Advanced Visualizations", width = 12, status = "primary", solidHeader = TRUE,
                  plotlyOutput("advancedSentimentPlot", height = "300px"),
                  plotlyOutput("advancedEmotionPlot", height = "300px"),
                  p("Interact with the plots for deeper insights.")
                )
              )),
      tabItem(tabName = "time_spent_analysis",
              fluidRow(
                box(
                  title = "Time Spent Analysis", width = 12, status = "primary", solidHeader = TRUE,
                  plotOutput("timeSpentPlot", height = "600px"),
                  p("This plot analyzes the time spent across different conversation types.")
                )
              )),
      # New tabs for additional features
      tabItem(tabName = "emotion_heatmap",
              fluidRow(
                box(
                  title = "Heatmap of Emotion Frequency", width = 12, status = "primary", solidHeader = TRUE,
                  plotOutput("emotionHeatmapPlot", height = "600px")
                )
              )),
      tabItem(tabName = "network_graph",
              fluidRow(
                box(
                  title = "Network Graph for User Interactions", width = 12, status = "primary", solidHeader = TRUE,
                  plotOutput("networkGraphPlot", height = "600px")
                )
              )),
      tabItem(tabName = "sankey_diagram",
              fluidRow(
                box(
                  title = "Sankey Diagram for Emotion Flow", width = 12, status = "primary", solidHeader = TRUE,
                  plotOutput("sankeyDiagramPlot", height = "600px")
                )
              )),
      tabItem(tabName = "facet_grid",
              fluidRow(
                box(
                  title = "Facet Grid of Sentiment by User", width = 12, status = "primary", solidHeader = TRUE,
                  plotOutput("facetGridPlot", height = "600px")
                )
              ))
    )
  )
)

server <- function(input, output, session) {
  # Display dfCardio dataset
  output$cardioData <- renderDataTable({
    DT::datatable(
      dfCardio,
      options = list(paging = TRUE, searching = TRUE),
      rownames = FALSE,
      class = 'cell-border stripe',
      escape = FALSE
    )
  })

  # Initialize chat history
  chat_history <- reactiveVal(data.frame(Role = character(), Message = character(),
                                         Sentiment = character(), Score = numeric(),
                                         Emotion = character(), timestamp = as.POSIXct(character()), stringsAsFactors = FALSE))

  # Keep track of the number of responses
  response_count <- reactiveVal(0)

  # Initialize CVD questions
  cvd_questions <- reactiveVal(NULL)
  current_question_index <- reactiveVal(1)

  # Log for when questions should be generated
  generate_questions <- reactiveVal(FALSE)

  # Function to generate CVD Questions
  generateCVDQuestions <- function(api_key) {
    prompt <- "Generate 10 personalized questions related to ID, AGE, SYSTOLIC, DIASTOLIC BP, SMOKING, DRINKING, CHOLESTROL, GLUCOSE, AND IF U ARE ACTIVE."
    return(unlist(strsplit(generateContent(prompt, api_key), "\n")))
  }

  # Generate content from chatbot and perform sentiment analysis
  observeEvent(input$generateBtn, {
    user_text <- input$userInput
    api_key <- "AIzaSyA2SPN3LIko1zwCQU58YHmLMf56OUVejiQ"  # Replace with your actual API key

    if (user_text != "" && response_count() < 10) {
      # Generate response based on user input
      response <- generateContent(user_text, api_key)

      # Perform sentiment analysis on user input
      user_sentiment_score <- sentimentr::sentiment(user_text)$sentiment
      user_sentiment_label <- ifelse(mean(user_sentiment_score) > 0, "Positive", 
                                      ifelse(mean(user_sentiment_score) < 0, "Negative", "Neutral"))
      user_score <- min(max(mean(user_sentiment_score), -1), 1)

      # Perform emotion detection on user input
      user_emotions <- get_nrc_sentiment(user_text)
      user_emotion_index <- which(user_emotions[1, ] == max(user_emotions[1, ]))
      user_emotion_label <- if (length(user_emotion_index) > 0) colnames(user_emotions)[user_emotion_index[1]] else NA

      # Perform sentiment analysis on the chatbot's response
      sentiment_score <- sentimentr::sentiment(response)$sentiment
      sentiment_label <- ifelse(mean(sentiment_score) > 0, "Positive", 
                                ifelse(mean(sentiment_score) < 0, "Negative", "Neutral"))
      response_score <- min(max(mean(sentiment_score), -1), 1)

      # Perform emotion detection on chatbot's response
      response_emotions <- get_nrc_sentiment(response)
      response_emotion_index <- which(response_emotions[1, ] == max(response_emotions[1, ]))
      response_emotion_label <- if (length(response_emotion_index) > 0) colnames(response_emotions)[response_emotion_index[1]] else NA

      # Update chat history with timestamp
      updated_history <- rbind(chat_history(), 
                               data.frame(Role = "User", Message = user_text, Sentiment = user_sentiment_label, 
                                          Score = user_score, Emotion = user_emotion_label, 
                                          timestamp = Sys.time(), stringsAsFactors = FALSE), 
                               data.frame(Role = "Model", Message = response, Sentiment = sentiment_label, 
                                          Score = response_score, Emotion = response_emotion_label, 
                                          timestamp = Sys.time(), stringsAsFactors = FALSE))
      chat_history(updated_history)

      # Update response count
      response_count(response_count() + 1)

      # Render updated chat output
      output$chatOutput <- renderDataTable({
        DT::datatable(
          chat_history(),
          options = list(paging = FALSE, searching = FALSE),
          rownames = FALSE,
          class = 'cell-border stripe',
          escape = FALSE
        )
      })

      # Update metrics
      output$avgSentimentScore <- renderText({
        avg_score <- mean(chat_history()$Score)
        paste("Average Sentiment Score:", round(avg_score, 2))
      })
      
      output$mostFrequentEmotion <- renderText({
        emotion_counts <- table(chat_history()$Emotion)
        most_frequent <- names(emotion_counts)[which.max(emotion_counts)]
        paste("Most Frequently Discussed Emotion:", most_frequent)
      })
      
      output$totalMessages <- renderText({
        paste("Total Messages Exchanged:", nrow(chat_history()))
      })
      
      output$sentimentCounts <- renderText({
        sentiment_counts <- table(chat_history()$Sentiment)
        sentiment_summary <- paste(names(sentiment_counts), ":", as.vector(sentiment_counts), collapse = ", ")
        paste("Sentiment Counts:", sentiment_summary)
      })

      # Render the sentiment count plot
      output$sentimentCountPlot <- renderPlot({
        sentiment_data <- data.frame(Sentiment = chat_history()$Sentiment)
        ggplot(sentiment_data, aes(x = Sentiment, fill = Sentiment)) +
          geom_bar(aes(y = ..count..), position="dodge") +
          labs(title = "Sentiment Count Distribution", x = "Sentiment", y = "Count") +
          theme_minimal() + theme(legend.position = "bottom")
      })

      # Render the emotion count plot
      output$emotionCountPlot <- renderPlot({
        emotions_list <- table(chat_history()$Emotion)
        emotion_counts_df <- data.frame(Emotion = names(emotions_list), Count = as.numeric(emotions_list))

        # Render the plot only if there are emotions counted
        if (nrow(emotion_counts_df) > 0) {
          ggplot(emotion_counts_df, aes(x = reorder(Emotion, -Count), y = Count, fill = Emotion)) +
            geom_bar(stat = "identity") +
            labs(title = "Emotion Count Distribution", x = "Emotion", y = "Count") +
            theme_minimal() + theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position = "none")
        }
      })

      # Render the sentiment score plot
      output$sentimentScorePlot <- renderPlot({
        sentiment_data <- data.frame(Role = factor(chat_history()$Role), Score = chat_history()$Score)
        ggplot(sentiment_data, aes(x = Role, y = Score, fill = Role)) +
          geom_boxplot() +
          labs(title = "Sentiment Scores by Role", x = "Role", y = "Sentiment Score") +
          theme_minimal() + theme(legend.position = "bottom")
      })

      # Render the sentiment line plot
      output$sentimentLinePlot <- renderPlot({
        sentiment_scores <- data.frame(
          Count = 1:nrow(chat_history()),
          Score = chat_history()$Score
        )
        ggplot(sentiment_scores, aes(x = Count, y = Score)) +
          geom_line(color = "blue") +
          geom_point(size = 2, color = "red") +
          labs(title = "Sentiment Score Trend", x = "Message Count", y = "Sentiment Score") +
          theme_minimal()
      })

      # Render the cumulative sentiment plot
      output$cumulativeSentimentPlot <- renderPlot({
        cumulative_scores <- cumsum(chat_history()$Score)
        ggplot(data.frame(Count = 1:length(cumulative_scores), CumulativeScore = cumulative_scores), aes(x = Count, y = CumulativeScore)) +
          geom_line(color = "green") +
          geom_point(size = 2, color = "orange") +
          labs(title = "Cumulative Sentiment Score Trend", x = "Message Count", y = "Cumulative Sentiment Score") +
          theme_minimal()
      })

      updateTextInput(session, "userInput", value = "")
    } else if (response_count() >= 10) {
      # Display message if more than 10 responses have been entered
      showModal(modalDialog(
        title = "Limit Reached",
        "You have entered 10 responses. The analysis is complete.",
        easyClose = TRUE,
        footer = NULL
      ))
    }
  })

  # Start generating questions based on user input
  observeEvent(input$generateQuestionsBtn, {
    api_key <- "AIzaSyA2SPN3LIko1zwCQU58YHmLMf56OUVejiQ" # Replace with your API key
    if (!generate_questions()) {
      cvd_questions(generateCVDQuestions(api_key))
      generate_questions(TRUE)
      current_question_index(1)

      # Initial question display
      output$currentQuestion <- renderText({
        cvd_questions()[current_question_index()]
      })
    } else {
      showModal(modalDialog(
        title = "Questions Already Generated",
        "You have already chosen to answer the questions.",
        easyClose = TRUE,
        footer = NULL
      ))
    }
  })

  # Get the next question
  observeEvent(input$nextQuestionBtn, {
    if (generate_questions()) {
      answer <- input$answerInput

      if (answer != "") {
        # Process the answer - for now just printing to console
        print(paste("User answered: ", answer))
        current_question_index(current_question_index() + 1)
        updateTextInput(session, "answerInput", value = "")
      }

      # Update the question to display
      output$currentQuestion <- renderText({
        if (current_question_index() <= length(cvd_questions())) {
          cvd_questions()[current_question_index()]
        } else {
          "Thank you for answering the questions!"
        }
      })
    }
  })

  # Create and render the word cloud
  output$wordCloudPlot <- renderPlot({
    # Combine all messages into a single text corpus
    messages <- paste(chat_history()$Message, collapse = " ")
    messages_corpus <- Corpus(VectorSource(messages))
    messages_corpus <- tm_map(messages_corpus, content_transformer(tolower))
    messages_corpus <- tm_map(messages_corpus, removePunctuation)
    messages_corpus <- tm_map(messages_corpus, removeNumbers)
    messages_corpus <- tm_map(messages_corpus, removeWords, stopwords("en"))

    # Create a term-document matrix
    tdm <- TermDocumentMatrix(messages_corpus)
    matrix <- as.matrix(tdm)
    word_freqs <- sort(rowSums(matrix), decreasing = TRUE)
    word_freqs_df <- data.frame(word = names(word_freqs), freq = word_freqs)

    # Generate the word cloud
    wordcloud(words = word_freqs_df$word, freq = word_freqs_df$freq, min.freq = 1, max.words = 100, random.order = FALSE, rot.per = 0.35, colors = brewer.pal(8, "Dark2"))
  })

  # Render the Emotion Score Consistency plot
  output$emotionConsistencyPlot <- renderPlot({
    if (nrow(chat_history()) > 1) {
      consistency_data <- data.frame(
        UserEmotion = chat_history()$Emotion[chat_history()$Role == "User"],
        ModelEmotion = chat_history()$Emotion[chat_history()$Role == "Model"]
      )

      # Convert emotions to a factor
      consistency_data <- na.omit(consistency_data)
      consistency_data$UserEmotion <- factor(consistency_data$UserEmotion)

      ggplot(consistency_data, aes(x = UserEmotion, fill = ModelEmotion)) +
        geom_bar(position = "fill") +
        labs(title = "Model Response Emotion Consistency", x = "User Emotion", y = "Proportion") +
        theme_minimal() + theme(legend.position = "right")
    } else {
      # If there's not enough data, show a placeholder message
      plot.new()
      text(0.5, 0.5, "Not enough data to display consistency.", cex = 1.5)
    }
  })

  # Render the Confusion Matrix for Emotion Detection
  output$confusionMatrixPlot <- renderPlot({
    confusion_matrix <- calculate_accuracy()

    if (!is.null(confusion_matrix)) {
      ggplot(as.data.frame(confusion_matrix), aes(x = Actual, y = Predicted)) +
        geom_tile(aes(fill = Freq), color = "white") +
        scale_fill_gradient(low = "white", high = "blue") +
        geom_text(aes(label = Freq), vjust = 1) +
        labs(title = "Confusion Matrix for Emotion Detection", x = "Actual Emotion", y = "Predicted Emotion") +
        theme_minimal() +
        theme(axis.text.x = element_text(angle = 45, hjust = 1))
    } else {
      plot.new()
      text(0.5, 0.5, "Not enough data to display the confusion matrix.", cex = 1.5)
    }
  })

  # Function to calculate accuracy metrics
  calculate_accuracy <- function() {
    if (nrow(chat_history()) > 1) {
      confusion_matrix <- table(Actual = chat_history()$Emotion[chat_history()$Role == "User"],
                                 Predicted = chat_history()$Emotion[chat_history()$Role == "Model"])
      return(confusion_matrix)
    } else {
      return(NULL)
    }
  }

  # Cluster Analysis
  observeEvent(input$performClustering, {
    if (nrow(chat_history()) > 1) {
      sentiment_data <- data.frame(Score = chat_history()$Score, Emotion = as.numeric(as.factor(chat_history()$Emotion)))
      clusters <- kmeans(sentiment_data, centers = 3)

      # Add cluster assignment to the history
      chat_history(cbind(chat_history(), Cluster = clusters$cluster))

      output$clusterPlot <- renderPlot({
        ggplot(sentiment_data, aes(x = Score, y = Emotion, color = as.factor(clusters$cluster))) +
          geom_point(size = 3) +
          labs(title = "Cluster Analysis of User Chats", x = "Sentiment Score", y = "Emotion", color = "Cluster") +
          theme_minimal()
      })
    } else {
      showModal(modalDialog(
        title = "Insufficient Data",
        "At least two messages are required to perform clustering.",
        easyClose = TRUE,
        footer = NULL
      ))
    }
  })

  # User Classification
  output$userClassificationPlot <- renderPlot({
    if (nrow(chat_history()) > 0) {
      user_emotion_dist <- as.data.frame(table(chat_history()$Emotion))
      colnames(user_emotion_dist) <- c("Emotion", "Count")

      ggplot(user_emotion_dist, aes(x = Emotion, y = Count, fill = Emotion)) +
        geom_bar(stat = "identity") +
        labs(title = "User Emotion Classification", x = "Emotion", y = "Count") +
        theme_minimal() + theme(legend.position = "none")
    } else {
      plot.new()
      text(0.5, 0.5, "No chat history available for classification.", cex = 1.5)
    }
  })

  # Advanced Visualizations
  output$advancedSentimentPlot <- renderPlotly({
    sentiment_data <- data.frame(Sentiment = chat_history()$Sentiment, Timestamp = chat_history()$timestamp)
    sentiment_summary <- sentiment_data %>%
      group_by(Timestamp = as.Date(Timestamp)) %>%
      summarise(SentimentCount = n())

    plot_ly(sentiment_summary, x = ~Timestamp, y = ~SentimentCount, type = 'scatter', mode = 'lines+markers', name = 'Sentiment') %>%
      layout(title = "Sentiment Over Time", xaxis = list(title = "Date"), yaxis = list(title = "Count"))
  })

  output$advancedEmotionPlot <- renderPlotly({
    emotion_data <- data.frame(Emotion = chat_history()$Emotion, Timestamp = chat_history()$timestamp)
    emotion_summary <- emotion_data %>%
      group_by(Timestamp = as.Date(Timestamp), Emotion) %>%
      summarise(Count = n())

    plot_ly(emotion_summary, x = ~Timestamp, y = ~Count, color = ~Emotion, type = 'bar') %>%
      layout(title = "Emotion Distribution Over Time", xaxis = list(title = "Date"), yaxis = list(title = "Count"))
  })

  # Time Spent Analysis
  output$timeSpentPlot <- renderPlot({
    time_data <- chat_history() %>%
      group_by(Role) %>%
      summarise(TotalMessages = n(), TotalTime = difftime(max(timestamp), min(timestamp), units = "mins"))

    ggplot(time_data, aes(x = Role, y = TotalTime, fill = Role)) +
      geom_col() +
      labs(title = "Time Spent Analysis by Role", x = "Role", y = "Total Time Spent (mins)") +
      theme_minimal()
  })

  # Heatmap of Emotion Frequency
  output$emotionHeatmapPlot <- renderPlot({
    emotion_freq <- table(chat_history()$Emotion)
    emotion_freq_df <- as.data.frame(emotion_freq)

    ggplot(emotion_freq_df, aes(x = "", y = Var1, fill = Freq)) +
      geom_tile() +
      scale_fill_gradient(low = "white", high = "blue") +
      labs(title = "Heatmap of Emotion Frequency", x = "", y = "Emotion") +
      theme_minimal() +
      theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())
  })

  # Network Graph for User Interactions
  output$networkGraphPlot <- renderPlot({
    if (nrow(chat_history()) > 1) {
      # Create an edge list for interactions based on sentiments
      edge_list <- chat_history()[, c("Role", "Emotion")]
      colnames(edge_list) <- c("from", "to")

      g <- graph_from_data_frame(edge_list, directed = TRUE)
      plot(g, vertex.size=5, vertex.color="skyblue", edge.arrow.size=0.5, 
           main="Network Graph of User Interactions", layout=layout_with_fr)
    } else {
      plot.new()
      text(0.5, 0.5, "Not enough data for a network graph.", cex = 1.5)
    }
  })

  # Sankey Diagram for Emotion Flow
  output$sankeyDiagramPlot <- renderPlot({
    if (nrow(chat_history()) > 1) {
      sankey_data <- data.frame(
        UserEmotion = chat_history()$Emotion[chat_history()$Role == "User"],
        ModelEmotion = chat_history()$Emotion[chat_history()$Role == "Model"]
      )
      sankey_data <- as.data.frame(table(sankey_data))

      ggplot(sankey_data, aes(axis1 = UserEmotion, axis2 = ModelEmotion, y = Freq)) +
        geom_alluvium(aes(fill = UserEmotion)) +
        geom_stratum() +
        geom_text(stat = "stratum", aes(label = after_stat(stratum))) +
        labs(title = "Sankey Diagram of Emotion Flow", x = "Emotions", y = "Frequency") +
        theme_minimal()
    } else {
      plot.new()
      text(0.5, 0.5, "Not enough data for a Sankey diagram.", cex = 1.5)
    }
  })

  # Facet Grid of Sentiment by User
  output$facetGridPlot <- renderPlot({
    if (nrow(chat_history()) > 0) {
      ggplot(chat_history(), aes(x = Sentiment)) +
        geom_bar() +
        facet_wrap(~ Role) +
        labs(title = "Facet Grid of Sentiment by User", x = "Sentiment", y = "Count") +
        theme_minimal()
    } else {
      plot.new()
      text(0.5, 0.5, "No data available for facet grid.", cex = 1.5)
    }
  })
}

# Function to generate content (response from model)
generateContent <- function(prompt, api_key) {
  headers <- c(`Content-Type` = "application/json")
  params <- list(`key` = api_key)
  data <- sprintf('{"contents": [{"parts":[{"text": "%s"}]}]}', prompt)
  res <- httr::POST(
    url = "https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent",
    httr::add_headers(.headers = headers),
    query = params,
    body = data
  )
  
  # Check if the response is valid and then return the results
  if (httr::status_code(res) == 200) {
    response_content <- httr::content(res)
    if (length(response_content$candidates) > 0 && length(response_content$candidates[[1]]$content$parts) > 0) {
      return(response_content$candidates[[1]]$content$parts[[1]]$text)
    } else {
      return("Error: No valid response content.")
    }
  } else {
    return(paste("Error:", httr::status_code(res), httr::content(res, as = "text")))
  }
}

# Run the application
shinyApp(ui = ui, server = server)
